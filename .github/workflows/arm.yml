name: Arm

on:
  workflow_dispatch:
    inputs:
      device:
          description: 'device codename (e.g topaz/tissot)'
          default: 'samsung'
          required: true
      repo:
          description: 'Kernel source link (dont include . git at the end)'
          default: 'https://github.com/malkist01/J6.git'
          required: true
      branch:
          description: 'Kernel source branch'
          default: '3.18'
          required: true
      token:
          description: 'Telegram bot token'
          default: '7596553794:AAGoeg4VypmUfBqfUML5VWt5mjivN5-3ah8'
          required: false
      chat_id:
          description: 'Telegram chat id'
          default: '-1002287610863'
          required: false


env:
  TZ: Asia/Jakarta
  DEVICE: ${{ github.event.inputs.device }}
  REPO: ${{ github.event.inputs.repo }}
  BRANCH: ${{ github.event.inputs.branch }}
  token: ${{ github.event.inputs.token }}
  chat_id: ${{ github.event.inputs.chat_id }}

jobs:
  kernel-build:
    runs-on: ubuntu-24.04

    steps:
      - name: Initializing environment
        run: |
          git config --global user.name "malkist01"
          git config --global user.email "aripujiyanto0812@gmail.com"
apt update -y && apt upgrade -y && apt install nano bc bison ca-certificates curl flex gcc git libc6-dev libssl-dev openssl python-is-python3 ssh wget zip zstd make clang gcc-arm-linux-gnueabi software-properties-common build-essential libarchive-tools gcc-aarch64-linux-gnu -y && apt install build-essential -y && apt install libssl-dev libffi-dev libncurses5-dev zlib1g zlib1g-dev libreadline-dev libbz2-dev libsqlite3-dev make gcc -y && apt install pigz -y && apt install python3 -y && apt install cpio -y && apt install lld -y && apt install llvm -y && apt-get install g++-aarch64-linux-gnu -y && apt install libelf-dev -y && apt install neofetch -y && neofetch

      - name: Compiling
        run: |
          if [ "${DEVICE}" = "samsung" ]; then
            wget https://raw.githubusercontent.com/malkist01/kernel_build_action/main/scripts/m.sh
            bash m.sh
          else
            echo "Device not supported yet"
          fi